#pragma once
#include "sNVData.hpp"
#include "sData.hpp"

// SUBSYSTEM TYPE
enum subsystem { CMD, COMPLEX, MODELS, LIGHTS, PHYSICS, AUDIO, ACTORS, CAMERA };

// COMMAND TYPE
enum cmd {
	// COMMAND ERRORS
	UNKN_CMD,

	// INTERNAL COMMANDS
	GET_POSITION, SET_POSITION, UPDATE_POSITION,			// POSITION [GET/SET/UPDATE]
	GET_ORIENTATION, SET_ORIENTATION,						// ORIENTATION [GET/SET]
	SET_VELOCITY,											// VELOCITY [SET]

	// DEVELOPER CONSOLE COMMANDS
	WIREFRAME, VISIBLE, CREATE, SELECT,

	// DEBUG MODE COMMANDS
	DEBUG_MODE,

	// MEDIATOR SPECIFIC COMMANDS
	SAVE_FILES, DATA_DISPLAY,

	// VERIFY TRIGGER CONDITION COMMANDS
	CHECK_TRIG_POSITION,

	// LUA SPECIFIC COMMANDS
	MOVE, ROTATE, FOLLOW, TRIGGER, LOOKAT, SERIAL, PARALLEL, ANIMASCRIPT
};

// CMD STATES
enum cmdstate { NONE, ENABLE, DISABLE, TOGGLE };

// COMMAND ARGUMENTS
enum cmdargs { ALL };

// ERROR TYPE
enum error { OK, NOK, UNKNOWN_SUBSYSTEM, UNKNOWN_COMMAND, UNKNOWN_STATE, INVALID_SUBSYSTEM, INVALID_COMMAND, INVALID_COMMAND_ARGS };

class iMediatorInterface {
public:
	virtual ~iMediatorInterface() { };
	virtual sData RecieveMessage(sData& data) = 0;
};
